apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-config
  namespace: vllm-semantic-router-system
data:
  envoy.yaml: |
    static_resources:
      listeners:
        - name: listener_0
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 8801
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    stat_prefix: ingress_http
                    # Extensive JSON access logging for troubleshooting
                    access_log:
                      - name: envoy.access_loggers.stdout
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
                          log_format:
                            json_format:
                              time: "%START_TIME%"
                              protocol: "%PROTOCOL%"
                              request_method: "%REQ(:METHOD)%"
                              request_path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                              response_code: "%RESPONSE_CODE%"
                              response_flags: "%RESPONSE_FLAGS%"
                              bytes_received: "%BYTES_RECEIVED%"
                              bytes_sent: "%BYTES_SENT%"
                              duration: "%DURATION%"
                              upstream_host: "%UPSTREAM_HOST%"
                              upstream_cluster: "%UPSTREAM_CLUSTER%"
                              upstream_local_address: "%UPSTREAM_LOCAL_ADDRESS%"
                              request_id: "%REQ(X-REQUEST-ID)%"
                              selected_model: "%REQ(X-SELECTED-MODEL)%"
                              selected_endpoint: "%REQ(X-GATEWAY-DESTINATION-ENDPOINT)%"
                              router_category: "%REQ(X-ROUTER-CATEGORY)%"
                              router_confidence: "%REQ(X-ROUTER-CONFIDENCE)%"
                    
                    route_config:
                      name: local_route
                      virtual_hosts:
                        - name: local_service
                          domains: ["*"]
                          routes:
                            # Route /v1/models to semantic router classify API
                            - match:
                                path: "/v1/models"
                              route:
                                cluster: semantic_router_cluster
                                timeout: 120s

                            # Route to Qwen model based on header (check this first)
                            - match:
                                prefix: "/"
                                headers:
                                - name: "x-gateway-destination-endpoint"
                                  string_match:
                                    exact: "172.30.68.65:80"
                              route:
                                cluster: qwen_cluster
                                timeout: 120s

                            # Route to Mistral model based on header
                            - match:
                                prefix: "/"
                                headers:
                                - name: "x-gateway-destination-endpoint"
                                  string_match:
                                    exact: "172.30.95.11:80"
                              route:
                                cluster: mistral_cluster
                                timeout: 120s

                            # Default fallback route to Mistral
                            - match:
                                prefix: "/"
                              route:
                                cluster: mistral_cluster
                                timeout: 120s
                              # Add response headers to show routing decision
                              response_headers_to_add:
                                - header:
                                    key: "x-debug-routing-target"
                                    value: "%REQ(X-GATEWAY-DESTINATION-ENDPOINT)%"
                                - header:
                                    key: "x-debug-category"
                                    value: "%REQ(X-ROUTER-CATEGORY)%"
                                - header:
                                    key: "x-debug-confidence"
                                    value: "%REQ(X-ROUTER-CONFIDENCE)%"
                    
                    http_filters:
                      # External Processing filter - calls semantic router
                      - name: envoy.filters.http.ext_proc
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.ext_proc.v3.ExternalProcessor
                          grpc_service:
                            envoy_grpc:
                              cluster_name: extproc_service
                          allow_mode_override: true
                          processing_mode:
                            request_header_mode: "SEND"
                            response_header_mode: "SEND"
                            request_body_mode: "BUFFERED"
                            response_body_mode: "BUFFERED"
                            request_trailer_mode: "SKIP"
                            response_trailer_mode: "SKIP"
                          mutation_rules:
                            allow_all_routing: true
                            allow_envoy: true
                          # Fail requests if ExtProc fails (for troubleshooting)
                          failure_mode_allow: false
                          # 5s timeout for classification
                          message_timeout: 5s
                      
                      # Router filter must come after ext_proc
                      - name: envoy.filters.http.router
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                          suppress_envoy_headers: true
                    
                    # Protocol options
                    http2_protocol_options:
                      max_concurrent_streams: 100
                      initial_stream_window_size: 65536
                      initial_connection_window_size: 1048576
                    stream_idle_timeout: "120s"
                    request_timeout: "120s"
                    common_http_protocol_options:
                      idle_timeout: "120s"

      clusters:
        # ExtProc service - semantic router gRPC (localhost:50051)
        - name: extproc_service
          connect_timeout: 5s
          per_connection_buffer_limit_bytes: 52428800
          type: STATIC
          lb_policy: ROUND_ROBIN
          typed_extension_protocol_options:
            envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
              "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
              explicit_http_config:
                http2_protocol_options:
                  connection_keepalive:
                    interval: 30s
                    timeout: 10s
          load_assignment:
            cluster_name: extproc_service
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: 127.0.0.1
                          port_value: 50051
        
        # Semantic router classify API - for /v1/models and direct queries (localhost:8080)
        - name: semantic_router_cluster
          connect_timeout: 5s
          per_connection_buffer_limit_bytes: 52428800
          type: STATIC
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: semantic_router_cluster
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: 127.0.0.1
                          port_value: 8080
          typed_extension_protocol_options:
            envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
              "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
              explicit_http_config:
                http_protocol_options: {}
        
        # vLLM backend cluster - Mistral model
        - name: mistral_cluster
          connect_timeout: 5s
          per_connection_buffer_limit_bytes: 52428800
          type: STATIC
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: mistral_cluster
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: 172.30.95.11
                          port_value: 80
          typed_extension_protocol_options:
            envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
              "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
              explicit_http_config:
                http_protocol_options: {}

        # vLLM backend cluster - Qwen model
        - name: qwen_cluster
          connect_timeout: 5s
          per_connection_buffer_limit_bytes: 52428800
          type: STATIC
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: qwen_cluster
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: 172.30.68.65
                          port_value: 80
          typed_extension_protocol_options:
            envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
              "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
              explicit_http_config:
                http_protocol_options: {}

        # Placeholder cluster that will always fail (kept for debugging)
        # This lets us see routing decisions in logs without actual backends
        - name: missing_backend_cluster
          connect_timeout: 1s
          type: STATIC
          load_assignment:
            cluster_name: missing_backend_cluster
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: 127.0.0.1
                          port_value: 9999  # Nothing listening here

    # Admin interface for debugging
    admin:
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 19000